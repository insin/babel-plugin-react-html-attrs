// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-react-html-attrs automatic-runtime 1`] = `
"import { jsx as _jsx } from \\"react/jsx-runtime\\";

/*#__PURE__*/
_jsx(\\"div\\", {
  id: \\"test\\",
  className: \\"test\\",
  children: /*#__PURE__*/_jsx(\\"label\\", {
    htmlFor: \\"test\\",
    className: \\"test\\",
    children: \\"Test\\"
  })
});"
`;

exports[`babel-plugin-react-html-attrs basic 1`] = `
"/*#__PURE__*/
React.createElement(\\"div\\", {
  id: \\"test\\",
  className: \\"test\\"
}, /*#__PURE__*/React.createElement(\\"label\\", {
  htmlFor: \\"test\\",
  className: \\"test\\"
}, \\"Test\\"), /*#__PURE__*/React.createElement(CustomElement, {
  for: \\"text\\",
  class: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"div\\", attrs));"
`;

exports[`babel-plugin-react-html-attrs html 1`] = `
"var html = /*#__PURE__*/React.createElement(\\"html\\", null, /*#__PURE__*/React.createElement(\\"head\\", null, /*#__PURE__*/React.createElement(\\"link\\", {
  crossOrigin: \\"test\\",
  href: \\"#\\",
  hrefLang: \\"en\\",
  charSet: \\"utf-8\\"
}), /*#__PURE__*/React.createElement(\\"meta\\", {
  charSet: \\"utf-8\\",
  httpEquiv: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"script\\", {
  charSet: \\"utf-8\\",
  crossOrigin: \\"test\\",
  noModule: true
}), /*#__PURE__*/React.createElement(\\"script\\", {
  async: true,
  defer: true,
  noModule: true
}), /*#__PURE__*/React.createElement(\\"style\\", {
  scoped: true
})), /*#__PURE__*/React.createElement(\\"div\\", {
  \\"aria-colcount\\": 2,
  \\"aria-colindex\\": 2,
  \\"aria-colspan\\": 2,
  \\"aria-level\\": 2,
  \\"aria-posinset\\": 2,
  \\"aria-rowcount\\": 2,
  \\"aria-rowindex\\": 2,
  \\"aria-rowspan\\": 2,
  \\"aria-setsize\\": 2,
  \\"aria-valuemax\\": 2,
  \\"aria-valuemin\\": 2,
  \\"aria-valuenow\\": 2
}), /*#__PURE__*/React.createElement(\\"a\\", {
  hrefLang: \\"test\\",
  referrerPolicy: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"map\\", {
  name: \\"infographic\\"
}, /*#__PURE__*/React.createElement(\\"area\\", {
  href: \\"\\",
  hrefLang: \\"en\\"
})), /*#__PURE__*/React.createElement(\\"details\\", {
  open: true
}), /*#__PURE__*/React.createElement(\\"del\\", {
  dateTime: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"dialog\\", {
  open: true
}), /*#__PURE__*/React.createElement(\\"fieldset\\", {
  disabled: true
}), /*#__PURE__*/React.createElement(\\"form\\", {
  acceptCharset: \\"utf-8\\",
  autoComplete: \\"false\\",
  encType: \\"utf-8\\",
  noValidate: true
}, /*#__PURE__*/React.createElement(\\"button\\", {
  autoFocus: true,
  disabled: true,
  formAction: \\"test\\",
  formEncType: \\"test\\",
  formMethod: \\"test\\",
  formNoValidate: true,
  formTarget: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"button\\", {
  autoFocus: true,
  disabled: true,
  formNoValidate: true
}), /*#__PURE__*/React.createElement(\\"input\\", {
  autoComplete: \\"false\\",
  autoFocus: true,
  crossOrigin: \\"test\\",
  formAction: \\"test\\",
  formEncType: \\"test\\",
  formMethod: \\"test\\",
  formNoValidate: true,
  formTarget: \\"\\",
  id: \\"input\\",
  type: \\"text\\",
  inputMode: \\"tel\\",
  max: 42,
  maxLength: 42,
  min: 1,
  minLength: 1,
  readOnly: true,
  required: true,
  size: 2,
  step: 2
}), /*#__PURE__*/React.createElement(\\"input\\", {
  autoFocus: true,
  checked: true,
  disabled: true,
  formNoValidate: true,
  multiple: true,
  readOnly: true,
  required: true
}), /*#__PURE__*/React.createElement(\\"label\\", {
  htmlFor: \\"input\\"
}), /*#__PURE__*/React.createElement(\\"select\\", {
  autoComplete: \\"false\\",
  autoFocus: true,
  size: 2
}, /*#__PURE__*/React.createElement(\\"optgroup\\", {
  disabled: true
}), /*#__PURE__*/React.createElement(\\"option\\", {
  disabled: true,
  selected: true
})), /*#__PURE__*/React.createElement(\\"select\\", {
  autoComplete: \\"false\\",
  autoFocus: true,
  disabled: true,
  multiple: true,
  required: true
}), /*#__PURE__*/React.createElement(\\"textarea\\", {
  autoComplete: \\"false\\",
  autoFocus: true,
  cols: 4,
  maxLength: 42,
  minLength: 1,
  readOnly: true,
  rows: 42
}), /*#__PURE__*/React.createElement(\\"textarea\\", {
  autoFocus: true,
  disabled: true,
  readOnly: true,
  required: true
})), /*#__PURE__*/React.createElement(\\"form\\", {
  noValidate: true
}), /*#__PURE__*/React.createElement(\\"iframe\\", {
  allowFullScreen: true,
  allowtransparency: true,
  frameBorder: \\"0\\",
  marginHeight: 2,
  marginWidth: 2,
  referrerPolicy: \\"test\\",
  seamless: true,
  srcDoc: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"iframe\\", {
  allowFullScreen: true,
  allowtransparency: true,
  seamless: true
}), /*#__PURE__*/React.createElement(\\"img\\", {
  crossOrigin: \\"anonymous\\",
  referrerPolicy: \\"origin\\",
  srcSet: \\"test\\",
  useMap: \\"test\\",
  tabIndex: -1
}), /*#__PURE__*/React.createElement(\\"ins\\", {
  dateTime: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"keygen\\", {
  autoFocus: true,
  name: \\"name\\",
  challenge: \\"challenge string\\",
  keyType: \\"type\\",
  keyParams: \\"pqg-params\\"
}), /*#__PURE__*/React.createElement(\\"keygen\\", {
  autoFocus: true,
  disabled: true
}), /*#__PURE__*/React.createElement(\\"video\\", {
  autoPlay: true,
  controlsList: \\"test\\",
  crossOrigin: \\"test\\",
  mediaGroup: \\"test\\",
  playsInline: true,
  disablePictureInPicture: true
}, /*#__PURE__*/React.createElement(\\"track\\", {
  default: true,
  srcLang: \\"en\\"
})), /*#__PURE__*/React.createElement(\\"video\\", {
  autoPlay: true,
  controls: true,
  disablePictureInPicture: true,
  loop: true,
  muted: true,
  playsInline: true
}), /*#__PURE__*/React.createElement(\\"meter\\", {
  high: 42,
  low: 1,
  min: 200,
  max: 500,
  optimum: 123
}), /*#__PURE__*/React.createElement(\\"object\\", {
  classID: \\"test\\",
  useMap: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"ol\\", {
  reversed: true,
  start: 2
}), /*#__PURE__*/React.createElement(\\"output\\", {
  htmlFor: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"progress\\", {
  max: 42
}), /*#__PURE__*/React.createElement(\\"table\\", {
  cellPadding: 2,
  cellSpacing: 2
}, /*#__PURE__*/React.createElement(\\"colgroup\\", {
  span: 2
}, /*#__PURE__*/React.createElement(\\"col\\", {
  span: 2
})), /*#__PURE__*/React.createElement(\\"tbody\\", null, /*#__PURE__*/React.createElement(\\"tr\\", null, /*#__PURE__*/React.createElement(\\"th\\", {
  colSpan: 2,
  rowSpan: 2
}), /*#__PURE__*/React.createElement(\\"td\\", {
  colSpan: 2,
  rowSpan: 2
})))), /*#__PURE__*/React.createElement(\\"time\\", {
  dateTime: \\"test\\"
}), /*#__PURE__*/React.createElement(\\"menu\\", null, /*#__PURE__*/React.createElement(\\"menuitem\\", {
  radioGroup: \\"group1\\"
})), /*#__PURE__*/React.createElement(\\"div\\", {
  accessKey: \\"test\\",
  autoCapitalize: \\"test\\",
  autoCorrect: \\"test\\",
  autoSave: \\"test\\",
  className: \\"test\\",
  contentEditable: true,
  contextMenu: \\"test\\",
  hidden: true,
  httpEquiv: \\"test\\",
  itemID: \\"test\\",
  itemProp: \\"test\\",
  itemRef: \\"test\\",
  itemScope: true,
  itemType: \\"test\\",
  spellCheck: true,
  tabIndex: 0
}), /*#__PURE__*/React.createElement(\\"div\\", {
  itemScope: true
}));"
`;

exports[`babel-plugin-react-html-attrs svg 1`] = `
"/*#__PURE__*/
React.createElement(\\"svg\\", {
  accentHeight: \\"test\\",
  alignmentBaseline: \\"auto\\",
  arabicForm: \\"initial\\",
  baselineShift: \\"test\\",
  capHeight: \\"test\\",
  clipPath: \\"test\\",
  clipRule: \\"test\\",
  colorInterpolation: \\"test\\",
  colorInterpolationFilters: \\"auto\\",
  colorProfile: \\"test\\",
  colorRendering: \\"test\\",
  dominantBaseline: \\"test\\",
  enableBackground: \\"test\\",
  fillOpacity: \\"test\\",
  fillRule: \\"inherit\\",
  floodColor: \\"test\\",
  floodOpacity: \\"test\\",
  fontFamily: \\"test\\",
  fontSize: \\"test\\",
  fontSizeAdjust: \\"test\\",
  fontStretch: \\"test\\",
  fontStyle: \\"test\\",
  fontVariant: \\"test\\",
  fontWeight: \\"test\\",
  glyphName: \\"test\\",
  glyphOrientationHorizontal: \\"test\\",
  glyphOrientationVertical: \\"test\\",
  horizAdvX: \\"test\\",
  horizOriginX: \\"test\\",
  imageRendering: \\"test\\",
  letterSpacing: \\"test\\",
  lightingColor: \\"test\\",
  markerEnd: \\"test\\",
  markerMid: \\"test\\",
  markerStart: \\"test\\",
  overlinePosition: \\"test\\",
  overlineThickness: \\"test\\",
  paintOrder: \\"test\\",
  panose1: \\"test\\",
  pointerEvents: \\"test\\",
  renderingIntent: \\"test\\",
  shapeRendering: \\"test\\",
  stopColor: \\"test\\",
  stopOpacity: \\"test\\",
  strikethroughPosition: \\"test\\",
  strikethroughThickness: \\"test\\",
  strokeDasharray: \\"test\\",
  strokeDashoffset: \\"test\\",
  strokeLinecap: \\"inherit\\",
  strokeLinejoin: \\"inherit\\",
  strokeMiterlimit: \\"test\\",
  strokeOpacity: \\"test\\",
  strokeWidth: \\"test\\",
  textAnchor: \\"test\\",
  textDecoration: \\"test\\",
  textRendering: \\"test\\",
  underlinePosition: \\"test\\",
  underlineThickness: \\"test\\",
  unicodeBidi: \\"test\\",
  unicodeRange: \\"test\\",
  unitsPerEm: \\"test\\",
  vAlphabetic: \\"test\\",
  vHanging: \\"test\\",
  vIdeographic: \\"test\\",
  vMathematical: \\"test\\",
  vectorEffect: \\"test\\",
  vertAdvY: \\"test\\",
  vertOriginX: \\"test\\",
  vertOriginY: \\"test\\",
  wordSpacing: \\"test\\",
  writingMode: \\"test\\",
  xHeight: \\"test\\",
  xlinkActuate: \\"test\\",
  xlinkArcrole: \\"test\\",
  xlinkHref: \\"test\\",
  xlinkRole: \\"test\\",
  xlinkShow: \\"test\\",
  xlinkTitle: \\"test\\",
  xlinkType: \\"test\\",
  xmlBase: \\"test\\",
  xmlLang: \\"test\\",
  xmlSpace: \\"test\\",
  xmlnsXlink: \\"test\\"
});"
`;

exports[`babel-plugin-react-html-attrs transform-react-inline-elements 1`] = `
"/*#__PURE__*/
babelHelpers.jsx(\\"div\\", {
  id: \\"test\\",
  className: \\"test\\"
}, void 0, /*#__PURE__*/babelHelpers.jsx(\\"label\\", {
  htmlFor: \\"test\\",
  className: \\"test\\"
}, void 0, \\"Test\\"));"
`;
